<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Http\Requests\{{name}}\Index{{name}}Request;
use App\Http\Requests\{{name}}\Store{{name}}Request;
use App\Http\Requests\{{name}}\Update{{name}}Request;
use App\Models\{{name}};
use App\Repositories\{{name}}Repository;

class {{name}}Controller extends Controller
{
    /**
     * {{name}}Repository
     * @var {{name}}Repository
     */
    private ${{name}}Repository;

    /**
     * {{name}}Controller::__construct
     *
     * @param {{name}}Repository ${{name_snake}}Repository
     */
    public function __construct({{name}}Repository ${{name_snake}}Repository)
    {
        {{policy}}
        $this->{{name}}Repository = ${{name_snake}}Repository;
    }

    /**
     * Get List
     *
     * @param Index{{name}}Request $request use `Pagination Or Unlimit`
     * @return \Illuminate\Database\Eloquent\Collection|\Illuminate\Pagination\LengthAwarePaginator
     */
    public function index(Index{{name}}Request $request)
    {
        return $this->{{name}}Repository->index($request);
    }

    /**
     * Store
     *
     * @param  \App\Http\Requests\{{name}}\Store{{name}}Request  $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function store(Store{{name}}Request $request)
    {
        return $this->{{name}}Repository->store($request->validated());
    }

    /**
     * Show
     *
     * @param  \App\Models\{{name}}  ${{name_snake}}
     * @return \App\Models\{{name}}|null
     */
    public function show({{name}} ${{name_snake}})
    {
        return $this->{{name}}Repository->show(${{name_snake}});
    }

    /**
     * Update
     *
     * @param  \App\Http\Requests\{{name}}\Update{{name}}Request  $request
     * @param  \App\Models\{{name}}  ${{name_snake}}
     * @return \Illuminate\Http\JsonResponse
     */
    public function update(Update{{name}}Request $request, {{name}} ${{name_snake}})
    {
        return $this->{{name}}Repository->update($request->validated(), ${{name_snake}});
    }

    /**
     * Soft Delete
     *
     * @param  \App\Models\{{name}}  ${{name_snake}}
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroy({{name}} ${{name_snake}})
    {
        return $this->{{name}}Repository->destroy(${{name_snake}});
    }

    /**
     * Force Delete
     *
     * @param  \App\Models\{{name}}  ${{name_snake}}
     * @return \Illuminate\Http\JsonResponse
     */
    public function delete({{name}} ${{name_snake}})
    {
        return $this->{{name}}Repository->delete(${{name_snake}});
    }

    /**
     * Restore
     *
     * @param  \App\Models\{{name}}  ${{name_snake}}
     * @return \Illuminate\Http\JsonResponse
     */
    public function restore({{name}} ${{name_snake}})
    {
        return $this->{{name}}Repository->restore(${{name_snake}});
    }
}
